1.Log data analysis:
---------------------------------
The Wazuh log data analysis module receives logs through text files or Windows event logs. It can also directly receive logs via remote syslog, which is useful for firewalls and other such devices.

Requirement 10 - Log and Monitor All Access to System Components and Cardholder Data: This control requires that user activities, including those by employees, contractors, consultants, internal and external vendors, and other third parties are logged and monitored, and the log data stored for a specified period of time.

Use cases
PCI DSS 10.2.2 requires that audit logs record the following details for each auditable event:

User identification.

Type of event.

Date and time.

Success and failure indication.

Origination of event.

Identity or name of affected data, system component, resource, or service (for example, name and protocol).

---------------------------CONFIG(Wazuh manager)---------------------------

Set <logall_json>yes</logall_json> in /var/ossec/etc/ossec.conf

Set archives: enabled to true in /etc/filebeat/filebeat.yml

Restart Filebeat : systemctl restart filebeat

Restart the Wazuh manager: systemctl restart wazuh-manager

In Wazuh console:
-----------------------

Select ☰ > Dashboard management > Dashboards Management in the Wazuh dashboard.

Choose Index Patterns and select Create index pattern. Use wazuh-archives-* as the index pattern name.

Select timestamp as the primary time field for use with the global time filter, then proceed to create the index pattern.

Open the menu and select Discover under Explore. Events should be getting reported there.

---------------------------------------------------------------------------------

PCI DSS requirement 10.4.1 requires to review the following audit logs at least once daily:

All security events.

Logs of all system components that store, process, or transmit cardholder data (CHD) and/or sensitive authentication data (SAD).

Logs of all critical system components.

Logs of all servers and system components that perform security functions (for example, network security controls, intrusion-detection systems/intrusion-prevention systems (IDS/IPS), and authentication servers).

=====================END OF LOG DATA ANALYSIS===========================

2.Configuration assessment:
-----------------------------------------------
The Security configuration assessment module determines the state of hardening and configuration policies on agents. SCA performs scans to discover exposures or misconfigurations in monitored endpoints. Those scans assess the configuration of the hosts using policy files that contain rules to be tested against the actual configuration of the host.

The SCA module helps to meet the following PCI DSS requirements:
-------------------------------------------------------------------------------------------
Requirement 2 - Apply Secure Configuration to All System Components

Requirement 8 - Identify Users and Authentication Access to System Components

NOTE: This is by default configured in Wazuh no need to do any changes just verify in console under SCA section and make  changes mentioned in that section

========================END OF CONFIGURATION ASSESSMENT===================================

3.Malware detection:
—------------------------

Wazuh offers several capabilities that support malware detection. These detections can be done by:
Finding patterns in the system that do not match expected behavior using the rootcheck component
Integrating with VirusTotal to detect and remove malware
Integrating with YARA to detect malware
Using CDB lists to detect and remove malicious files

These malware detection components help meet the following PCI DSS requirement:
Requirement 5 - Protect All Systems and Networks from Malicious Software: Malicious software (malware) is software or firmware designed to infiltrate or damage a computer system without the owner's knowledge or consent, with the intent of compromising the confidentiality, integrity, or availability of the owner’s data, applications, or operating system. The goal of this requirement is to protect systems from current and evolving malware threats.
INTEGRATING WITH VIRUSTOTAL TO DETECT AND REMOVE MALWARE : 
—----------------------------------------------------------------------------------------------------

Wazuh uses the integrator module to connect to external APIs and alerting tools such as VirusTotal.
In this use case, you use the Wazuh File Integrity Monitoring (FIM) module to monitor a directory for changes and the VirusTotal API to scan the files in the directory. Then, configure Wazuh to trigger an active response script and remove files that VirusTotal detects as malicious. We test this use case on CentOs and Windows endpoints.
Configuration for LINUX endpoint 
—-------------------------------------------------

#/var/ossec/etc/ossec.conf this path is in agent 

#/var/ossec/etc/shared/Linux/agent.conf this is in manager related to agents

Add an entry within the <syscheck> block to configure a directory to be monitored in near real-time. In this case, you are monitoring the /root directory:

#<directories realtime="yes">/root</directories>

Install jq, a utility that processes JSON input from the active response script

#sudo apt update
#sudo apt -y install jq

Create the /var/ossec/active-response/bin/remove-threat.sh active response script to remove malicious files from the endpoint:

—--------------------------------------------------
#!/bin/bash

LOCAL=`dirname $0`;
cd $LOCAL
cd ../

PWD=`pwd`

read INPUT_JSON
FILENAME=$(echo $INPUT_JSON | jq -r .parameters.alert.data.virustotal.source.file)
COMMAND=$(echo $INPUT_JSON | jq -r .command)
LOG_FILE="${PWD}/../logs/active-responses.log"

#------------------------ Analyze command -------------------------#
if [ ${COMMAND} = "add" ]
then
 # Send control message to execd
 printf '{"version":1,"origin":{"name":"remove-threat","module":"active-response"},"command":"check_keys", "parameters":{"keys":[]}}\n'

 read RESPONSE
 COMMAND2=$(echo $RESPONSE | jq -r .command)
 if [ ${COMMAND2} != "continue" ]
 then
  echo "`date '+%Y/%m/%d %H:%M:%S'` $0: $INPUT_JSON Remove threat active response aborted" >> ${LOG_FILE}
  exit 0;
 fi
fi

# Removing file
rm -f $FILENAME
if [ $? -eq 0 ]; then
 echo "`date '+%Y/%m/%d %H:%M:%S'` $0: $INPUT_JSON Successfully removed threat" >> ${LOG_FILE}
else
 echo "`date '+%Y/%m/%d %H:%M:%S'` $0: $INPUT_JSON Error removing threat" >> ${LOG_FILE}
fi

exit 0;
—-----------------------------------------------------

Change the /var/ossec/active-response/bin/remove-threat.sh file ownership, and permissions:

#sudo chmod 750 /var/ossec/active-response/bin/remove-threat.sh
#sudo chown root:wazuh /var/ossec/active-response/bin/remove-threat.sh

Restart the Wazuh agent to apply the changes:

NOTE: ALL THE ABOVE CHANGES ARE DONE ON WAZUH AGENT

#sudo systemctl restart wazuh-agent

ON WAZUH SERVER(MANAGER)

Add the following rules to the /var/ossec/etc/rules/local_rules.xml file on the Wazuh server. These rules alert about changes in the /root directory that are detected by FIM scans:

—------------------------------------------------
<group name="syscheck,pci_dss_11.5,nist_800_53_SI.7,">
    <!-- Rules for Linux systems -->
    <rule id="100200" level="7">
        <if_sid>550</if_sid>
        <field name="file">/root</field>
        <description>File modified in /root directory.</description>
    </rule>
    <rule id="100201" level="7">
        <if_sid>554</if_sid>
        <field name="file">/root</field>
        <description>File added to /root directory.</description>
    </rule>
</group>
—-------------------------------------------------------

Add the following configuration to the Wazuh server /var/ossec/etc/ossec.conf file to enable the Virustotal integration. Replace <YOUR_VIRUS_TOTAL_API_KEY> with your VirusTotal API key. This allows to trigger a VirusTotal query whenever any of the rules 100200 and 100201 are triggered:

—--------------------------------------------------------
<ossec_config>
  <integration>
    <name>virustotal</name>
    <api_key><YOUR_VIRUS_TOTAL_API_KEY></api_key> <!-- Replace with your VirusTotal API key -->
    <rule_id>100200,100201</rule_id>
    <alert_format>json</alert_format>
  </integration>
</ossec_config>
—----------------------------------------------------------

Append the following blocks to the Wazuh server /var/ossec/etc/ossec.conf file. This enables active response and triggers the remove-threat.sh script when VirusTotal flags a file as malicious:

—-----------------------------------------------------------

<ossec_config>
  <command>
    <name>remove-threat</name>
    <executable>remove-threat.sh</executable>
    <timeout_allowed>no</timeout_allowed>
  </command>

  <active-response>
    <disabled>no</disabled>
    <command>remove-threat</command>
    <location>local</location>
    <rules_id>87105</rules_id>
  </active-response>
</ossec_config>
—-----------------------------------------------------------------

Add the following rules to the Wazuh server /var/ossec/etc/rules/local_rules.xml file to alert about the active response results:

—--------------------------------------------------------------
<group name="virustotal,">
  <rule id="100092" level="12">
    <if_sid>657</if_sid>
    <match>Successfully removed threat</match>
    <description>$(parameters.program) removed threat located at $(parameters.alert.data.virustotal.source.file)</description>
  </rule>

  <rule id="100093" level="12">
    <if_sid>657</if_sid>
    <match>Error removing threat</match>
    <description>Error removing threat located at $(parameters.alert.data.virustotal.source.file)</description>
  </rule>
</group>
—------------------------------------------------------------------

Restart the Wazuh manager to apply the configuration changes:

#sudo systemctl restart wazuh-manager

Attack emulation
—-----------------------
Download an EICAR test file to the /root directory on the Ubuntu endpoint:


#sudo curl -Lo /root/eicar.com https://secure.eicar.org/eicar.com && sudo ls -lah /root/eicar.com


CHECK IN CONSOLE IN THREAD DETECTION SECTION FOR EVNTS
—---------------------------------------------------------------------------------------------------------------


Configuration for WINDOWS endpoint 
—--------------------------------------------------------

Perform the following steps to configure Wazuh to monitor near real-time changes in the /Downloads directory. These steps also install the necessary packages and create the active response script to remove malicious files.

#C:\Program Files (x86)\ossec-agent\ossec.conf this is windows agent conf

#/var/ossec/etc/shared/WINDOWS/agent.conf this is in manager related to agents

Add an entry within the <syscheck> block to configure a directory to be monitored in near real-time. In this use case, you configure Wazuh to monitor the C:\Users\<USER_NAME>\Downloads directory. Replace the <USER_NAME> variable with the appropriate user name:

#<directories realtime="yes">C:\Users\<USER_NAME>\Downloads</directories>



Download the Python executable installer from the official Python website.


   →Run the Python installer once downloaded. Make sure to check the following boxes:
Install launcher for all users
Add Python 3.X to PATH (This places the interpreter in the execution path)
Once Python completes the installation process, open an administrator PowerShell terminal and use pip to install PyInstaller:


> pip install pyinstaller
> pyinstaller --version




Create an active response script remove-threat.py to remove a file from the Windows endpoint:


—---------------------------------------------------
#!/usr/bin/python3
# Copyright (C) 2015-2022, Wazuh Inc.
# All rights reserved.


import os
import sys
import json
import datetime


if os.name == 'nt':
    LOG_FILE = "C:\\Program Files (x86)\\ossec-agent\\active-response\\active-responses.log"
else:
    LOG_FILE = "/var/ossec/logs/active-responses.log"


ADD_COMMAND = 0
DELETE_COMMAND = 1
CONTINUE_COMMAND = 2
ABORT_COMMAND = 3


OS_SUCCESS = 0
OS_INVALID = -1


class message:
    def __init__(self):
        self.alert = ""
        self.command = 0


def write_debug_file(ar_name, msg):
    with open(LOG_FILE, mode="a") as log_file:
        log_file.write(str(datetime.datetime.now().strftime('%Y/%m/%d %H:%M:%S')) + " " + ar_name + ": " + msg +"\n")


def setup_and_check_message(argv):


    # get alert from stdin
    input_str = ""
    for line in sys.stdin:
        input_str = line
        break




    try:
        data = json.loads(input_str)
    except ValueError:
        write_debug_file(argv[0], 'Decoding JSON has failed, invalid input format')
        message.command = OS_INVALID
        return message


    message.alert = data


    command = data.get("command")


    if command == "add":
        message.command = ADD_COMMAND
    elif command == "delete":
        message.command = DELETE_COMMAND
    else:
        message.command = OS_INVALID
        write_debug_file(argv[0], 'Not valid command: ' + command)


    return message




def send_keys_and_check_message(argv, keys):


    # build and send message with keys
    keys_msg = json.dumps({"version": 1,"origin":{"name": argv[0],"module":"active-response"},"command":"check_keys","parameters":{"keys":keys}})


    write_debug_file(argv[0], keys_msg)


    print(keys_msg)
    sys.stdout.flush()


    # read the response of previous message
    input_str = ""
    while True:
        line = sys.stdin.readline()
        if line:
            input_str = line
            break


    # write_debug_file(argv[0], input_str)


    try:
        data = json.loads(input_str)
    except ValueError:
        write_debug_file(argv[0], 'Decoding JSON has failed, invalid input format')
        return message


    action = data.get("command")


    if "continue" == action:
        ret = CONTINUE_COMMAND
    elif "abort" == action:
        ret = ABORT_COMMAND
    else:
        ret = OS_INVALID
        write_debug_file(argv[0], "Invalid value of 'command'")


    return ret


def main(argv):


    write_debug_file(argv[0], "Started")


    # validate json and get command
    msg = setup_and_check_message(argv)


    if msg.command < 0:
        sys.exit(OS_INVALID)


    if msg.command == ADD_COMMAND:
        alert = msg.alert["parameters"]["alert"]
        keys = [alert["rule"]["id"]]
        action = send_keys_and_check_message(argv, keys)


        # if necessary, abort execution
        if action != CONTINUE_COMMAND:


            if action == ABORT_COMMAND:
                write_debug_file(argv[0], "Aborted")
                sys.exit(OS_SUCCESS)
            else:
                write_debug_file(argv[0], "Invalid command")
                sys.exit(OS_INVALID)


        try:
            file_path = msg.alert["parameters"]["alert"]["data"]["virustotal"]["source"]["file"]
            if os.path.exists(file_path):
                os.remove(file_path)
            write_debug_file(argv[0], json.dumps(msg.alert) + " Successfully removed threat")
        except OSError as error:
            write_debug_file(argv[0], json.dumps(msg.alert) + "Error removing threat")




    else:
        write_debug_file(argv[0], "Invalid command")


    write_debug_file(argv[0], "Ended")


    sys.exit(OS_SUCCESS)


if __name__ == "__main__":
    main(sys.argv)
—-------------------------------------------------------


Convert the active response Python script remove-threat.py to a Windows executable application. Run the following PowerShell command as an administrator to create the executable:
> pyinstaller -F \path_to_remove-threat.py
Move the executable file remove-threat.exe to the C:\Program Files (x86)\ossec-agent\active-response\bin directory.


> Restart-Service -Name wazuh


NOTE: All the changes above should be done on wazuh agent


Wazuh server

Add the following configuration to the /var/ossec/etc/ossec.conf file on the Wazuh server to enable the VirusTotal integration. Replace <YOUR_VIRUS_TOTAL_API_KEY> with your VirusTotal API key. This allows to trigger a VirusTotal query whenever any of the rules in the FIM syscheck group are triggered:

—---------------------------------------------
<ossec_config>
  <integration>
    <name>virustotal</name>
    <api_key><YOUR_VIRUS_TOTAL_API_KEY></api_key> <!-- Replace with your VirusTotal API key -->
    <group>syscheck</group>
    <alert_format>json</alert_format>
  </integration>
</ossec_config>
—-------------------------------------------------

Append the following blocks to the Wazuh server /var/ossec/etc/ossec.conf file. This enables active response and trigger the remove-threat.exe executable when the VirusTotal query returns positive matches for threats:

—---------------------------------------------------
<ossec_config>
  <command>
    <name>remove-threat</name>
    <executable>remove-threat.exe</executable>
    <timeout_allowed>no</timeout_allowed>
  </command>

  <active-response>
    <disabled>no</disabled>
    <command>remove-threat</command>
    <location>local</location>
    <rules_id>87105</rules_id>
  </active-response>
</ossec_config>
—----------------------------------------------------------

Add the following rules to the Wazuh server /var/ossec/etc/rules/local_rules.xml file to alert about the active response results.

—----------------------------------------------------------
<group name="virustotal,">
  <rule id="100092" level="12">
      <if_sid>657</if_sid>
      <match>Successfully removed threat</match>
      <description>$(parameters.program) removed threat located at $(parameters.alert.data.virustotal.source.file)</description>
  </rule>

  <rule id="100093" level="12">
    <if_sid>657</if_sid>
    <match>Error removing threat</match>
    <description>Error removing threat located at $(parameters.alert.data.virustotal.source.file)</description>
  </rule>
</group>
—-----------------------------------------------------------------

Restart the Wazuh manager to apply the configuration changes:

#sudo systemctl restart wazuh-manager

Attack emulation

Follow the next steps to temporarily turn off real-time Microsoft Defender antivirus protection in Windows Security:

Click on the Start menu and type Windows Security to search for that app.
Select the Windows Security app from results, go to Virus & threat protection, and under Virus & threat protection settings select Manage settings.
Switch Real-time protection to Off.

Download an EICAR test file to the C:\Users\<USER_NAME>\Downloads directory on the Windows endpoint.

> Invoke-WebRequest -Uri https://secure.eicar.org/eicar.com.txt -OutFile eicar.txt
> cp .\eicar.txt C:\Users\<USER_NAME>\Downloads

==============END OF VIRUSTOTAL========================

==============END OF MALWARE DETECTION=========================


4.Vulnerability detection:
—--------------------------------

The goal of this requirement is to ensure that systems and networks are regularly tested to confirm their security status. These tests include penetration testing and vulnerability scans.

 The Wazuh agent collects a list of installed applications and OS information and sends it periodically to the manager. The Wazuh manager compares this information with vulnerability content documents to determine what vulnerabilities exist on an endpoint.

/var/ossec/etc/shared/default/agent.conf  This should be in shared agent.conf

—------------------------------
<wodle name="syscollector">
   <disabled>no</disabled>
   <interval>1h</interval>
   <packages>yes</packages>
</wodle>
—------------------------------
Make sure vulnerability detection is enabled by checking the /var/ossec/etc/ossec.conf manager configuration file.

—-------------------------------------------------

<vulnerability-detection>
  <enabled>yes</enabled>
  <index-status>yes</index-status>
  <feed-update-interval>60m</feed-update-interval>
</vulnerability-detection>

<indexer>
  <enabled>yes</enabled>
  <hosts>
    <host>https://0.0.0.0:9200</host>
  </hosts>
  <ssl>
    <certificate_authorities>
      <ca>/etc/filebeat/certs/root-ca.pem</ca>
    </certificate_authorities>
    <certificate>/etc/filebeat/certs/filebeat.pem</certificate>
    <key>/etc/filebeat/certs/filebeat-key.pem</key>
  </ssl>
</indexer>
—----------------------------------------------------

NOTE: ALL the above configurations will be by default be in wazuh if not make above changes and restart agent and manager

============END OF Vulnerability detection=======================

5.Active Response:
—----------------------

Active response allows the execution of scripts whenever an event matches certain rules in your Wazuh ruleset. The actions executed could be a firewall block or drop, traffic shaping or throttling, or account lockout, among others.


This requirement aims to ensure that you test your systems and networks regularly. Testing allows you to detect and respond to security status and possible intrusions. With the active response module, you can respond to intrusions and unauthorized file changes. You can find more details on configuring the active response module in the active response documentation section.

Configure the active response to execute the firewall-drop command when the rule for attempts to log in to a non-existent user is triggered (rule 5710) by adding the following block in the manager configuration file (/var/ossec/etc/ossec.conf):

—--------------------------------------
<active-response>
   <command>firewall-drop</command>
   <location>local</location>
   <rules_id>5710</rules_id>
   <timeout>100</timeout>
</active-response>

Note The firewall-drop command is included in the manager configuration file by default.

—----------------------------------------

systemctl restart wazuh-manager

============END OF ACTIVE RESPONSE=======================

6.System inventory:
—-------------------------

Wazuh uses the system inventory module to gather information about a monitored endpoint. This information includes hardware details, OS information, network details, and running processes. The agent runs periodic scans on the endpoint and sends the information to the manager. The manager then updates the appropriate system information. See the System inventory section for more information about the system inventory module.

The system inventory module helps to achieve some of the objectives of this requirement. It keeps an inventory of all endpoints and the processes/daemons running on them. The system inventory module also gets information about the endpoint hardware, OS, and network details. This allows visibility into the PCI DSS relevant assets, enabled network ports, and running processes/daemons, to individuals in an organization.




============END OF SYSTEM INVENTORY======================


                                   END OF WAZUH PCI-DSS















